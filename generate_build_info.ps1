# generate_build_info.ps1
# This script generates a BuildInfo.cs file with an incrementing build version.

# Paths are relative to the project root directory.
$counterFilePath = "build_counter.txt"
$outputCsFilePath = "BuildInfo.cs"

# Get the current date in YYYYMMDD format.
$currentDate = Get-Date -Format "yyyyMMdd"

$buildNumber = 1
$lastBuildDate = ""

# Read the counter file to determine the next build number.
if (Test-Path $counterFilePath) {
    $content = Get-Content $counterFilePath
    if ($content -match "(\d{8})\.(\d+)") {
        $lastBuildDate = $matches[1]
        $lastBuildNumber = [int]$matches[2]

        if ($lastBuildDate -eq $currentDate) {
            # If it's the same day, increment the build number.
            $buildNumber = $lastBuildNumber + 1
        }
    }
}

# Format the new build version string (e.g., "20231027.01").
$newBuildVersion = "{0}.{1:D2}" -f $currentDate, $buildNumber

# Write the new version back to the counter file for the next build.
Set-Content -Path $counterFilePath -Value $newBuildVersion

# Generate the C# file content.
$csFileContent = @"
// This file is auto-generated by a build script. Do not edit.
namespace DOSGameCollection;

internal static class BuildInfo
{
    public const string BuildVersion = "$newBuildVersion";
}
"@

# Write the C# file that will be compiled with the project.
Set-Content -Path $outputCsFilePath -Value $csFileContent

Write-Host "Generated BuildInfo.cs with version: $newBuildVersion"

